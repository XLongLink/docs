{"version":3,"sources":["webpack:///../src/Introduzione.mdx","webpack:///../public/assets/PiramideDApp.png"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","type","variant","alt","src","require","isMDXComponent","module","exports"],"mappings":"iSASaA,EAAe,Q,4NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAMC,KAAK,UAAUC,QAAQ,QAAQF,QAAQ,QAA7C,6BAGA,kBACE,GAAM,gBADR,gBAGA,oqCAesD,mBAAKG,IAAI,WAAWC,IAAKC,EAAQ,UAfvF,4/D,0NA+CJR,EAAWS,gBAAiB,G,qBC3E5BC,EAAOC,QAAU,IAA0B","file":"component---src-introduzione-mdx-2883bdb9f041c4c21a08.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Users/nano2/Documents/GitHub/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Hint } from '@nejcm/docz-theme-extended';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Hint type=\"warning\" variant=\"outer\" mdxType=\"Hint\">\n    Warning: proof of concept\n    </Hint>\n    <h1 {...{\n      \"id\": \"introduzione\"\n    }}>{`Introduzione`}</h1>\n    <p>{`LongLink (LL) nasce per aiutare i developers a sviluppare applicazioni decentralizzate\n(dApp) dell'ecosistema di Algorand. L'obiettivo di LL è quello di semplificare e\nvelocizzare il più possibile la programmazione rimanendo il più generale possibile\nper non limitare le idee dei creatori. LL vuole raggiungere questo obiettivo\nimplementando Algorand standards (ARCs) e progetti che puntano ad uno sviluppo\npiù rapido o arricchiscono il risultato finale. Per il resto di questo testo\nverranno chiamate dApp di Layer 1 (dAL1) tutte quelle applicazioni che accedono\ndirettamente alla blockchain e servono a arricchire, semplificare o completare\napplicazioni di Layer 2 (dAL2) esempi di dAL1 sono: purestake, algonode,\nnf.domains, perawallet, …\nIl collegamento tramite dAL1 e la blockchain è permesso tramite sdk ufficiali creati da\nAlgorand foundation, LL vuole creare un collegamento simile tra i due layer di\napplicazioni.\nImplementare ad uno ad uno tutti gli standard richiede un sacco di tempo e di test,\nutilizzando LL i developer avranno tutto già pronto ad essere implementato nella loro\napplicazione, per finire un progetto in un tempo lampo. `}<img alt=\"Alt text\" src={require(\"../public/assets/PiramideDApp.png\")} />{`\nLL solve due grandi problemi per l’ecosistema, il primo è quello di scalabilità in\nquanto permette a nuove dAL1 di venire implementate direttamente nelle applicazioni\ngià esistenti. Come secondo questo garantisce un maggior livello di solidità\nall’ecosistema, in quanto se una dAL1 va offline o riscontra un problema di sicurezza\nche la fa fallire è possibile rimpiazzarlo da uno nuovo senza dover riprogrammare\nl’intero ecosistema.\nOvviamente numerosi sono i progetti che possono essere implementati ed è difficile\ndecidere qual’è più importante di un altro.  A tal proposito nella decisione di LL di\nimplementare dei progetti può variare a dipendenza dell’utilità, utilizzo, stabilità e\ngrado di decentralizzazione. Oltre a questo prima di implementare un progetto LL\ncontatterà gli autori del progetto stesso nel tentativo di raggiungere una collaborazione.\nPer i progetti che non vengono implementati ufficialmente da LL, sarà possibile creare\nplugin da implementare nel proprio progetto. I plugin possono aggiungere funzioni come:\nAPI da cui accedere ai dati della chain, collegamento a wallets, progetti di swap to\ntoken, domini, …\nLe dApp sviluppate con LL saranno dApp ibride, dove una parte dei dati e della logica\nsarà gestita dalla Blockchain, mentre altri dati non sensibili o parti di logica troppo\ngrandi, costose o semplicemente troppo lente da far eseguire dalla blockchain verranno\ngestite dall’applicazione stessa.\nOvviamente questo ha senso con certi progetti fino ad un limite. È possibile che\ndiversi progetti implementino delle funzionalità differenti e quindi non è possibile\nrenderli compatibili al 100%. Ma con dAL1 standard come nodi, explorer, swap, wallets,\nNFD,... è possibile creare un'implementazione generale in quanto ogni applicazione ha\nfunzionalità simili.\nLL si focalizzerà principalmente nello sviluppo di applicazioni web, in particolare\nper implementazioni in vanilla js e reactjs.\nAlcuni esempi di dAL2 che è possibile creare tramite LL sono: games, defi, social, …`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/PiramideDApp-b4ddd6349174b1cc99b43ef57a34e58e.png\";"],"sourceRoot":""}