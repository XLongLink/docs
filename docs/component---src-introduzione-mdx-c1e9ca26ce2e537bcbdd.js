(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{"2wxk":function(e,i,n){e.exports=n.p+"static/Piramide-b89dac605ce94993bffbd21ca29356c1.png"},YgtL:function(e,i,n){e.exports=n.p+"static/Schema_dAPP-288b3ac647b511e3881ab981dbae8628.png"},aZgg:function(e,i,n){"use strict";n.r(i),n.d(i,"_frontmatter",(function(){return c})),n.d(i,"default",(function(){return m}));var a=n("Fcif"),o=n("+I+c"),t=(n("mXGw"),n("/FXl")),r=n("TjRS"),l=n("5hvn"),p=(n("aD51"),["components"]),c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!Object.prototype.hasOwnProperty.call(c,"__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Introduzione.mdx"}});var d={_frontmatter:c},s=r.a;function m(e){var i=e.components,r=Object(o.a)(e,p);return Object(t.b)(s,Object(a.a)({},d,r,{components:i,mdxType:"MDXLayout"}),Object(t.b)(l.a,{type:"warning",variant:"outer",mdxType:"Hint"},"Warning: proof of concept"),Object(t.b)("h1",{id:"introduzione"},"Introduzione"),Object(t.b)("p",null,"LongLink (LL) nasce per aiutare i developers a sviluppare applicazioni decentralizzate\n(dApp) dell'ecosistema di Algorand. L'obiettivo di LL è quello di semplificare e\nvelocizzare il più possibile la programmazione rimanendo il più generale possibile\nper non limitare le idee dei creatori. LL vuole raggiungere questo obiettivo\nimplementando Algorand standards (ARCs) e progetti che puntano ad uno sviluppo\npiù rapido o arricchiscono il risultato finale. Per il resto di questo testo\nverranno chiamate dApp di Layer 1 (dAL1) tutte quelle applicazioni che accedono\ndirettamente alla blockchain e servono a arricchire, semplificare o completare\napplicazioni di Layer 2 (dAL2) esempi di dAL1 sono: purestake, algonode,\nnf.domains, perawallet, …\nIl collegamento tramite dAL1 e la blockchain è permesso tramite sdk ufficiali creati da\nAlgorand foundation, LL vuole creare un collegamento simile tra i due layer di\napplicazioni.\nImplementare ad uno ad uno tutti gli standard richiede un sacco di tempo e di test,\nutilizzando LL i developer avranno tutto già pronto ad essere implementato nella loro\napplicazione, per finire un progetto in un tempo lampo. ",Object(t.b)("img",{alt:"Alt text",src:n("2wxk")}),"\nLL solve due grandi problemi per l’ecosistema, il primo è quello di scalabilità in\nquanto permette a nuove dAL1 di venire implementate direttamente nelle applicazioni\ngià esistenti. Come secondo questo garantisce un maggior livello di solidità\nall’ecosistema, in quanto se una dAL1 va offline o riscontra un problema di sicurezza\nche la fa fallire è possibile rimpiazzarlo da uno nuovo senza dover riprogrammare\nl’intero ecosistema.\nOvviamente numerosi sono i progetti che possono essere implementati ed è difficile\ndecidere qual’è più importante di un altro.  A tal proposito nella decisione di LL di\nimplementare dei progetti può variare a dipendenza dell’utilità, utilizzo, stabilità e\ngrado di decentralizzazione. Oltre a questo prima di implementare un progetto LL\ncontatterà gli autori del progetto stesso nel tentativo di raggiungere una collaborazione.\nPer i progetti che non vengono implementati ufficialmente da LL, sarà possibile creare\nplugin da implementare nel proprio progetto. I plugin possono aggiungere funzioni come:\nAPI da cui accedere ai dati della chain, collegamento a wallets, progetti di swap to\ntoken, domini, …\nLe dApp sviluppate con LL saranno dApp ibride, dove una parte dei dati e della logica\nsarà gestita dalla Blockchain, mentre altri dati non sensibili o parti di logica troppo\ngrandi, costose o semplicemente troppo lente da far eseguire dalla blockchain verranno\ngestite dall’applicazione stessa.\nOvviamente questo ha senso con certi progetti fino ad un limite. È possibile che\ndiversi progetti implementino delle funzionalità differenti e quindi non è possibile\nrenderli compatibili al 100%. Ma con dAL1 standard come nodi, explorer, swap, wallets,\nNFD,... è possibile creare un'implementazione generale in quanto ogni applicazione ha\nfunzionalità simili.\nLL si focalizzerà principalmente nello sviluppo di applicazioni web, in particolare\nper implementazioni in vanilla js e reactjs.\nAlcuni esempi di dAL2 che è possibile creare tramite LL sono: games, defi, social, …\n",Object(t.b)("img",{alt:"Alt text",src:n("YgtL")})))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!Object.prototype.hasOwnProperty.call(m,"__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Introduzione.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-introduzione-mdx-c1e9ca26ce2e537bcbdd.js.map