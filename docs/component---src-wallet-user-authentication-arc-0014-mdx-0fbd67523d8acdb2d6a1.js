(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{bJUd:function(e,n,a){"use strict";a.r(n),a.d(n,"_frontmatter",(function(){return s})),a.d(n,"default",(function(){return d}));var t=a("Fcif"),i=a("+I+c"),l=(a("mXGw"),a("/FXl")),o=a("TjRS"),r=a("5hvn"),c=(a("aD51"),["components"]),s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!Object.prototype.hasOwnProperty.call(s,"__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Wallet/User authentication (ARC-0014).mdx"}});var u={_frontmatter:s},p=o.a;function d(e){var n=e.components,a=Object(i.a)(e,c);return Object(l.b)(p,Object(t.a)({},u,a,{components:n,mdxType:"MDXLayout"}),Object(l.b)(r.a,{type:"warning",variant:"outer",mdxType:"Hint"},"Warning: proof of concept"),Object(l.b)("h1",{id:"user-authentication-arc-0014"},"User authentication (ARC-0014)"),Object(l.b)("p",null,"Sebbene i wallet hanno un sistema di connessione differente, la struttura di\nautenticazione sarà simile in tutti i casi.\nCome precisato nella lunga descrizione in ARC-0014, l’autenticazione dell’utente\navviene in 2 passaggi. La prima si tratta di un login al proprio wallet tramite il\nprotocollo walletconnect. La seconda è un autenticazione tramite la firma di una\ntransazione nulla che non verrà eseguita dal network. L’hash della transazione serve\nad autenticare che l’utente dispone della chiave privata, infatti grazie alla\ncombinazione della chiave pubblica e dell’hash della transazione è  possibile\nconfermare che l’utente dispone della chiave privata con cui è stata firmata la\ntransazione e quindi proprietario dell’account.\nL’hash della transazione (token) viene successivamente inviato a LLS che controlla\nl’autenticità del token e lo converte in Json Web Token (JWT), che verrà usato in ogni\nrichiesta HTTP autenticare l’utente.\nIl seguente schema mostra il procedimento di autenticazione:"),Object(l.b)("p",null,"Ogni token avrà una durata limitata, ogni LLS avrà un valore predefinito di durata che\nè possibile modificare nella dashboard del sito.\nLL chiamerà un endpoint nel LLS in modo automatico per sapere la durata del token.\nÈ possibile verificare in qualsiasi momento se un utente è loggato o autenticato\ntramite:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},"ll.isLogged: boolean\nll.isAuthenticate: boolean\n")),Object(l.b)("p",null,"Inoltre le seguenti funzioni verranno utilizzate per loggare ed autenticare l’utente:\nPer loggare l’utente:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},"ll.login(showQRCode: boolean, net: NetName)\n")),Object(l.b)("p",null,"Una volta chiamata, la funzione crea una sessione di walletconnect. Nel caso in cui\n“openQRCode” sia true (default) e si stia utilizzando js in un browser, verrà aperto\nun popup con il qr code, altrimenti verrà loggato in console l’uri di walletconnect.\nÈ possibile indicare il tipo di rete in cui si vuole connettere: Mainnet, Betanet,\nTestnet\nPer autenticare l'utente:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},"ll.authenticate(openPopup: boolean)\n")),Object(l.b)("p",null,"In modo simile alla funzione di login, nel caso di un browser verrà aperto un popup\ncon le informazioni, altrimenti verranno loggate in console.\nLa funzione manderà una richiesta di transazione al wallet, la transazione avrà 0 fee\ne quindi rifiutata dalla blockchain. L’utente verrà informato tramite il popup sul\nperché deve firmare la transazione. Nel popup verrà avvisato l’utente di controllare\nche la transazione che sta firmando riguarda l’applicazione in uso.\nToken:\nIl token verrà salvato nel localstorage con la key “authtoken”, è possibile accedere\nal token ed al JWT tramite:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},"ll.token: string\nll.jwtoken: string\n")),Object(l.b)("p",null,"ma in più dei casi LL gestirà il token nelle richiesta api direttamente e quindi non\nè necessario passarlo manualmente.\nNota: le proprietà di un token JWT permettono al developer di creare un altro server\nper eventuali necessità e di controllare l’autenticità dell’utente in modo immediato.\nDisconnect:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},"ll.logout()\n")),Object(l.b)("p",null,"disconnette l’utente, termina la sessione di walletconnect, nel caso in cui\nll.linkTokenWc sia true, il token ed il JWT verranno cancellati dal localstorage e\nsarà necessario effettuare un'autenticazione nuovamente. È possibile settare\nlinkTokenWc come le altre opzione dalla dashboard della propria applicatione.\nUlteriori modifiche possono essere effettuate a dipendenza delle necessità della\ncommunity e per problemi di sicurezza"),Object(l.b)("p",null,"Spiegazione: ",Object(l.b)("a",{parentName:"p",href:"https://github.com/algorandfoundation/ARCs/pull/84/fil"},"https://github.com/algorandfoundation/ARCs/pull/84/fil")))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!Object.prototype.hasOwnProperty.call(d,"__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Wallet/User authentication (ARC-0014).mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-wallet-user-authentication-arc-0014-mdx-0fbd67523d8acdb2d6a1.js.map